/*
 * FaceRecognitionDotNet Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FaceRecognitionDotNet.Client.Client.OpenAPIDateConverter;

namespace FaceRecognitionDotNet.Client.Model
{
    /// <summary>
    /// Describes the left, top, right and bottom location of a face.
    /// </summary>
    [DataContract(Name = "FaceArea")]
    public partial class FaceArea : IEquatable<FaceArea>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceArea" /> class.
        /// </summary>
        /// <param name="bottom">The y-axis value of the bottom of the rectangle of face..</param>
        /// <param name="left">The x-axis value of the left side of the rectangle of face..</param>
        /// <param name="right">The x-axis value of the right side of the rectangle of face..</param>
        /// <param name="top">The y-axis value of the top of the rectangle of face..</param>
        public FaceArea(int bottom = default(int), int left = default(int), int right = default(int), int top = default(int))
        {
            this.Bottom = bottom;
            this.Left = left;
            this.Right = right;
            this.Top = top;
        }

        /// <summary>
        /// The y-axis value of the bottom of the rectangle of face.
        /// </summary>
        /// <value>The y-axis value of the bottom of the rectangle of face.</value>
        [DataMember(Name = "bottom", EmitDefaultValue = false)]
        public int Bottom { get; set; }

        /// <summary>
        /// The x-axis value of the left side of the rectangle of face.
        /// </summary>
        /// <value>The x-axis value of the left side of the rectangle of face.</value>
        [DataMember(Name = "left", EmitDefaultValue = false)]
        public int Left { get; set; }

        /// <summary>
        /// The x-axis value of the right side of the rectangle of face.
        /// </summary>
        /// <value>The x-axis value of the right side of the rectangle of face.</value>
        [DataMember(Name = "right", EmitDefaultValue = false)]
        public int Right { get; set; }

        /// <summary>
        /// The y-axis value of the top of the rectangle of face.
        /// </summary>
        /// <value>The y-axis value of the top of the rectangle of face.</value>
        [DataMember(Name = "top", EmitDefaultValue = false)]
        public int Top { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaceArea {\n");
            sb.Append("  Bottom: ").Append(Bottom).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaceArea);
        }

        /// <summary>
        /// Returns true if FaceArea instances are equal
        /// </summary>
        /// <param name="input">Instance of FaceArea to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaceArea input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bottom == input.Bottom ||
                    this.Bottom.Equals(input.Bottom)
                ) && 
                (
                    this.Left == input.Left ||
                    this.Left.Equals(input.Left)
                ) && 
                (
                    this.Right == input.Right ||
                    this.Right.Equals(input.Right)
                ) && 
                (
                    this.Top == input.Top ||
                    this.Top.Equals(input.Top)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Bottom.GetHashCode();
                hashCode = hashCode * 59 + this.Left.GetHashCode();
                hashCode = hashCode * 59 + this.Right.GetHashCode();
                hashCode = hashCode * 59 + this.Top.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
